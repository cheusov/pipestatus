# -*- mode: sh; -*-

#pipestatus_save_vars (){
#    while [ $# -ne 0 ]; do
#	eval "__pipestatus_$1=\$$1"
#	shift
#    done
#}

#pipestatus_restore_vars (){
#    while [ $# -ne 0 ]; do
#	eval "$1=\$__pipestatus_$1"
#	shift
#    done
#}

runpipe_base (){
    # unset pipestatus_[0-9]+ variables
    __pipestatus_j=1
    while eval "\${pipestatus_$__pipestatus_j+:} false"; do
        unset pipestatus_$__pipestatus_j
        __pipestatus_j=$(($__pipestatus_j+1))
    done

    # whole command
    __pipestatus_com=

    # token count
    __pipestatus_k=1

    #
    __pipestatus_stat_dir=/tmp/pipestatus.$$
    mkdir -m 700 $__pipestatus_stat_dir || exit 1
    __pipestatus_stat_fn=$__pipestatus_stat_dir/status

    # program in pipe (between |)
    __pipestatus_l=

    # counter
    __pipestatus_j=1
    for __pipestatus_a; do
        if [ "_$__pipestatus_a" = '_|' ]; then
            __pipestatus_com="$__pipestatus_com { $__pipestatus_l "'; echo "pipestatus_'$__pipestatus_j'=$?" >>'${__pipestatus_stat_fn}'; } |
'
            __pipestatus_j=$(($__pipestatus_j+1))
	    __pipestatus_l=
        else
            __pipestatus_l="$__pipestatus_l \"\$$__pipestatus_k\""
        fi
        __pipestatus_k=$(($__pipestatus_k+1))
    done
    __pipestatus_com="$__pipestatus_com $__pipestatus_l"'; echo "pipestatus_'"$__pipestatus_j"'=$?" >>'"${__pipestatus_stat_fn}"

    eval "$__pipestatus_com"
    . $__pipestatus_stat_fn

    rm -rf $__pipestatus_stat_dir
    pipesize=$__pipestatus_j

    return 0
}

check_status0 (){
    __pipestatus_j=1
    while eval "\${pipestatus_$__pipestatus_j+:} false"; do
	eval "[ \$pipestatus_$__pipestatus_j -eq 0 ]" || return 1
	__pipestatus_j=$(($__pipestatus_j+1))
    done

    return 0
}

runpipe0 (){
    runpipe_base "$@"
    check_status0
}

check_status_re (){
    __pipestatus_re=`echo $1 | sed 's/[.]/[0-9]+/g'`
    __pipestatus_j=1
    __pipestatus_ps=
    while eval "\${pipestatus_$__pipestatus_j+:} false"; do
	eval '__pipestatus_ps="$__pipestatus_ps ${pipestatus_'$__pipestatus_j'}"'
	__pipestatus_j=$(($__pipestatus_j+1))
    done

    # trick for set -e
    if echo "$__pipestatus_ps" | egrep "^ $re"'$' > /dev/null; then
	__pipestatus_ret=$?
    else
	__pipestatus_ret=$?
    fi

    return $__pipestatus_ret
}

# match all statuses with the pattern
# example: runpipe_re '0 . 0' prog1 prog2 prog3
# . means "any status"
runpipe_re (){
    __pipestatus_re=$1
    shift

    runpipe_base "$@"
    check_status_re $__pipestatus_re
}

# return exit code of the last program in pipe
check_status (){
    eval return '$pipestatus_'${pipesize}
}

# similar to plain pipe but set 'pipestatus_XX' and 'pipesize' variables
runpipe (){
    runpipe_base "$@"
    check_status
}
